[{"title":"Cloudflare代理GitHub Pages笔记","date":"2023-02-02T06:25:03.000Z","url":"/2023/02/02/Cloudflare%E4%BB%A3%E7%90%86GitHub-Pages%E7%AC%94%E8%AE%B0/","tags":[["DNS","/tags/DNS/"],["CDN","/tags/CDN/"],["GitHub","/tags/GitHub/"]],"categories":[["建站","/categories/%E5%BB%BA%E7%AB%99/"]],"content":"前言这里主要记录一下我的设置步骤和踩到的坑，Cloudflare帐号注册、域名NS记录、GitHub仓库创建、个人令牌创建和hexo使用令牌没什么需要特别注意的，这里就不赘述了。 补充：百度真的NB，自己的爬虫被GtiHub拉黑了死不承认，谷歌和必应都收录网站了还腆着脸跟我说网站不能访问。套上个Cloudflare就开始收录内容了，emmmm不多评价了。 操作步骤第一次设置CloudflareDNS解析类型：CNAME，名称：www，目标是GtiHub Pages默认的域名&lt;用户名&gt;.github.io，不使用代理。 这个很重要，初次设置时不能选代理，不然GitHub检测不到CNAME指向，无法开启https访问。很多搜索引擎将https作为加分项，强制https访问会提高权重。 SSL&#x2F;TLS概述选项，SSL&#x2F;TLS 加密模式设置为完全，因为GtiHub Pages有自己的证书，我们不需要Cloudflare的通用证书。 边缘证书选项，打开始终使用 HTTPS。 安全性（可选）自动程序选项，打开自动程序攻击模式，这样能拦截大多数自动跑网站目录的脚本。 设置选项，安全级别推荐设置为中、质询通过期保持默认的30分钟即可、打开浏览器完整性检查，这样能在一定程度上防止手动构建http请求 设置GitHub Pages打开GitHub Pages所属仓库的设置页面，切换到Pages选项卡，找到Custom domain设置项填写自己的域名点Save。过一会就会出现Enforce HTTPS选项，勾选后就可以使用https访问了。 第二次设置CloudflareDNS解析修改第一次设置的DNS，更改为使用代理，这样就使用了Cloudflare的CDN帮我们加速访问了。 问题与解决方案Q：我想让根域名和www前缀都能访问网站 A：在SEO实践中，当同一个域名两个不同的链接内容相同时，会触发搜索引擎惩罚而被降权。最优解是将一个链接使用301重定向到两一个链接上，本博客将根域名重定向到了www前缀上，实现了同时访问还避免了被惩罚。 网络上很多教程写的是创建页面规则，这是错误的，不适用于GitHub Pages。正确的做法是再创建一条DNS记录，同样是CNAME到&lt;用户名&gt;.github.io，使用代理。以本博客为例，当我们使用根域名访问时，GitHub Pages会返回301，引导浏览器访问www域名。 Q：访问网站无限次301跳转到自己 A：SSL&#x2F;TLS 加密模式设置为完全。默认设置下，Cloudflare会使用http访问源站，GitHub Pages返回301引导浏览器使用https访问，浏览器再次请求网站时又会经过Cloudflare，如此形成循环301跳转。 结语研究Cloudflare的DNS花了三天时间，最终的结果让我很满意，在大陆内访问速度明显变快了，还顺便解决了百度搜索引擎收录的问题。Q&amp;A的部分其实就是我跳进去的坑，大多数的时间都用来尝试解决那个301的问题了，希望这篇笔记能帮到其他人。"},{"title":"Arch Linux学习日记 - GNOME登录时打开小键盘","date":"2021-02-10T13:33:58.000Z","url":"/2021/02/10/Arch-Linux%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-GNOME%E7%99%BB%E5%BD%95%E6%97%B6%E6%89%93%E5%BC%80%E5%B0%8F%E9%94%AE%E7%9B%98/","tags":[["Arch","/tags/Arch/"],["Linux","/tags/Linux/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":"在Arch里使用GNOME桌面环境毫不意外的小键盘被默认禁用了，我多次Google尝试了很多方法，最后都以无效告终。 解决方案多次查找Arch Wiki后得知在GNOME 3.34版本把numlock-state键移动到org.gnome.desktop.peripherals.keyboard路径下了。知道这个信息后，就很好解决了，使用命令： [xiaobai@Arch ~]$ gsettings set org.gnome.desktop.peripherals.keyboard numlock-state true 老规矩，重启看效果。"},{"title":"我抛弃了Windows - Linux使用体验","date":"2020-06-16T12:46:37.000Z","url":"/2020/06/16/%E6%88%91%E6%8A%9B%E5%BC%83%E4%BA%86Windows-Linux%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/","tags":[["Linux","/tags/Linux/"],["Debian","/tags/Debian/"]],"categories":[["视频","/categories/%E8%A7%86%E9%A2%91/"]],"content":"一些想说的话这个视频很早就想做了，但我还想等我再成熟一些，多给观众们一些正向的反馈。想了很多，鸽大家这么久也不好，就做出来吧。如果观众对Linux有兴趣或者是问题，欢迎和我交流探讨，互相学习。 视频 "},{"title":"Debian Linux学习日记 - Debian的使用感受","date":"2020-03-28T14:34:49.000Z","url":"/2020/03/28/Debian-Linux%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-Debian%E7%9A%84%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/","tags":[["Linux","/tags/Linux/"],["Debian","/tags/Debian/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":"因为Debian社区坚持维护自己的规定，导致安装镜像文件里只有开源软件。但是有些硬件内核支持性的软件不是开源的，这就导致一部分硬件不能正常使用，需要自己手动安装内核软件。软件源虽然可以选择国内镜像，但是安全更新却还是在Debian的主服务器下载的。这就导致apt update比较慢，但是可以通过手动修改sources.list文件内容达到修改为国内镜像的目的。 补全硬件支持由于我是笔记本用户，最先注意到的就是WiFI不能用，经过搜索得知需要安装一个闭源软件：firmware-iwlwifi显卡方面，Intel、NVIDIA和AMD三家公司都有开源的驱动，均会被Linux安装程序自动检测安装。但是，AMD的显卡内核支持软件却不是开源的，这就导致驱动正确安装却不能使用的情况。这时需要安装内核支持软件：firmware-amd-graphics 我目前没有NVIDIA独显的电脑，所以不清楚NVIDIA显卡需不需要另外安装内核支持软件，欢迎留言补充 软件源的修改Linux的软件源列表文件是：/etc/apt/sources.list，更换源时需要删掉重复内容后再添加。我用的是清华大学的源，官网是：清华大学开源镜像站，内有更换教程，在这里不多做赘述。 字体的补充我自己经常使用的字体是微软雅黑，但是微软的字体是有版权的，不能二次分发，所以Linux系统里就没有这个字体。但是微软给了我们用户完整的使用权，这就意味着我们可以将字体复制出来使用。我在虚拟机里安装了最新版的Windows 10系统，将里面的字体全复制了出来。 Linux的字体目录是：/usr/share/fonts，我在里面创建了一个Microsoft文件夹，将复制出来的字体放到这个文件夹里了。接下来需要建立索引和更新字体缓存，使用命令：mkfontdir建立字体文件夹索引，使用命令：mkfontscale建立字体索引，使用命令：fc-cache更新字体缓存。 Gnome桌面的调整Debian的Gnome是没有经过改动的桌面环境，与Ubuntu的Gnome不一样，需要自己添加扩展修改。这里推荐几个比较好用的扩展。 推荐扩展这里会按照扩展名英文字母排序，所有扩展都可以通过extensions.gnome.org快速安装。 Clipboard Indicator用Windows 10已经习惯了剪贴板历史记录了，复制文本的时候习惯性的复制了一堆，再一起粘贴。这个扩展实现了剪贴板历史记录的功能，只需要将快捷键简单设置一下，便可无痛切换。 Coverflow Alt-TabAlt+Tab这个快捷键想必都很熟悉了，Gnome默认的窗口切换效果特别难看，而且多个工作空间还不能隔离。这个扩展完美的解决了这些问题，还可以设置弹性动画，增加了美观度。 Dash to DockDebian自带的Dash非常丑，还不能换位置。使用这个扩展将Dash转换为Dock之后就就非常美观了，将经常使用的应用收藏进Dock中，使用时直接点击即可。还可以设置透明度，桌面背景也不会挡住。 Draw On You Screen正如名字所述，这个扩展可以让你随时在屏幕上绘制图案和文字，还可以将成品保存下来。用来做讲解会是个不错的选择。 NetSpeed在Gnome的顶栏显示当前网速信息，比较实用的小工具。但是实际使用下来，我感觉数据好像不是很准，不过很好看，当个摆件也不错。 TopIcons Plus原版的Gnome托盘图标是在左下角的，而Ubuntu其实是更改了Gnome的源代码，让托盘图标显示在了右上角。这个扩展可以让左下角的图标移动到右上角，达到和Ubuntu一致的效果。 Touchpad Indicator这个扩展是笔记本必备扩展，它可以让你的笔记本插入外置鼠标时禁用触摸板，拔出鼠标时启用触摸板。其实在Windows下触摸板驱动已经实现了这个功能，但是Linux下需要安装这个插件实现。 User Themes这个扩展可以加载家目录里的主题，可以很方便的修改为喜欢的主题。"},{"title":"Linux学习日记 - 选择合适的Linux发行版","date":"2020-03-27T06:46:20.000Z","url":"/2020/03/27/Linux%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84Linux%E5%8F%91%E8%A1%8C%E7%89%88/","tags":[["Linux","/tags/Linux/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":"Linux开源的特点造就了这个系统如今的辉煌，也正是因为开源，Linux拥有许多发行版，不同的发行版之间的差距也很明显。找到适合自己的发行版，能大大提高使用体验。我在这里仅记录我使用过的发行版和我认为的优缺点 UbuntuUbuntu是我最早接触到的带有桌面环境的Linux。最开始接触到Ubuntu的时候它还是unity桌面，看着很不舒服，Ubuntu更换桌面环境为Gnome之后就好多了。刚开始切换为Linux一定会有很多不适应或者不懂的地方，这时候不要着急，慢慢搜索解决办法，一定有人比你先遇到相同的问题，参考一下他们的解决办法。随着时间的推移，我开始不看好Ubuntu了： Ubuntu的安装和使用的确非常方便，但是会带有一些没有必要的软件和功能。Ubuntu稳定性比较差，我使用Ubuntu一个月之后，每天都会弹出一个系统错误的反馈提示。Ubuntu的打扰比较多，隔几天就会提示你备份系统。 ArchArch是我第二个使用的系统。它的定制性极强，从内核到桌面环境都需要自己安装，因此它的安装极其繁琐。我因为已经习惯了Gnome就继续使用这个桌面环境了。Arch的AUR是用户维护的软件包列表，任何人都可以上传软件，所以Arch是Linux发行版里软件数量最多的系统。但是因为是滚动更新，所以更新非常频繁，用户需要花时间来维护自己的系统。我不喜欢Arch的理由有以下两点： 虽然软件数量多，但是基本上都是AUR的软件或者是依赖于AUR的，然而有些AUR已经不维护了或者是维护不及时导致某些软件安装有问题需要手动调整。我需要软件安装方便快速，而不是经常需要手动调整。我的学习和工作环境决定了我不是经常有时间去维护系统，我也不喜欢经常维护系统。 DebianDebian是我第三个使用的系统，也是我现在正在使用的系统。Debian是我身边的人向我推荐的，其特殊的发布流程造就了这一个稳定的系统，但也正因如此，Debian的系统更新并不定时。Debian是deb系的上游系统，我这里就拿来和同属deb系的Ubuntu做一个比较吧。 安装和Ubuntu差不多，基本算是一样，但是由于Debian社区坚持维护自己的规定，所以系统安装后只有开源软件，导致一些硬件的内核软件包缺失，需要自己手动安装。全默认安装时，会有更多的无用软件，所以我选择的是最小安装后手动安装桌面。Debian的确非常稳定，但是软件包不全，有很少一部分需要手动安装。"},{"title":"Ubuntu Linux学习日记 - 开机时自动打开小键盘","date":"2019-11-24T12:17:00.000Z","url":"/2019/11/24/Ubuntu-Linux%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-%E5%BC%80%E6%9C%BA%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E5%B0%8F%E9%94%AE%E7%9B%98/","tags":[["Linux","/tags/Linux/"],["Ubuntu","/tags/Ubuntu/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":"使用Ubuntu Linux有一段时间了，之前一直用的16.04 LTS版，最近才升级到18.04 LTS版。更新之后我惊讶的发现我的小键盘居然关闭了？！因为我的开机密码中有数字，习惯性的用小键盘输入，所以刚更新就发现了这个问题。 发现问题我使用Ubuntu 16.04 LTS版的时候，其实小键盘的开关也是默认关闭的，当时我的处理方式是用apt安装了numlockx软件，然后更改了一个配置文件。升级系统后发现小键盘又默认关闭了。 排查问题我的第一反应是去apt看一下numlockx软件还在不，终端显示已安装，排除。接下来去找配置文件，发现当初编辑的文件不存在。 找到原因经过多次Google搜索得知：50-unity-greeter.conf文件已被弃用，并且没有替代的文件。不能在开机后执行一条命令了，也就是说numlockx软件已经不能完成我的期望了，故卸载。 解决方案又经过了多次Google搜索后找到了一个不用安装任何软件的方法，并且此方法全版本通用。 首先我们需要切换到root用户，普通用户可没那么高权限执行接下来的命令。 xiaobai@Ubuntu:~$ sudo -i 接下来我们需要切换到gdm用户并且暂时授予执行bash命令的权限。 root@Ubuntu:~# su gdm -s &#x2F;bin&#x2F;bash 接下来到了重头戏，真正达到目的的是下面这条命令，最后引号里的值为on代表开启数字小键盘。 gdm@Ubuntu:&#x2F;root$ gsettings set org.gnome.settings-daemon.peripherals.keyboard numlock-state ‘on’ 到这里设置已经完成了，重新启动系统就可以看到效果了。"},{"title":"国际象棋学习日记 - 子力价值","date":"2019-10-04T05:26:53.000Z","url":"/2019/10/04/%E5%9B%BD%E9%99%85%E8%B1%A1%E6%A3%8B%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-%E5%AD%90%E5%8A%9B%E4%BB%B7%E5%80%BC/","tags":[["国际象棋","/tags/%E5%9B%BD%E9%99%85%E8%B1%A1%E6%A3%8B/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":"什么是子力价值在国际象棋中，每一个棋子都有自己的用处与价值，子力价值就是用来衡量棋子价值的参数。我见过双车杀王的，也见过用兵堵王的，所以，不能因为子力价值小就抛弃某一个棋子。 每一个子的价值分别是多少 小兵 骑士 主教 战车 皇后 教科书 1 3 3 5 10 电脑AI 1 3.25 3.50 5 9.75 从这个表格中，我们可以清晰地看出国际象棋的教科书和计算机AI给出的子力价值不同。实际上，国际象棋的子力价值只是一个参考值并不是一个确定不变的数值。子力价值会随着棋子的位置变化而变化，即将到达敌方底线的小兵远比一个在出发点的小兵的子力价值要高。国王的子力价值无限高，国际象棋最终的目标是将死国王，一旦国王被将死游戏会立即结束。我基于对国际象棋的理解，自己整理了一组子力价值并应用到了每一局对局中，我使用的子力价值是： 小兵 骑士 主教 战车 皇后 悲剧小白 1 3 3.50 5 10 子力价值的用处在一局游戏中，如果出现了两个棋子同时即将被吃的时候，选择保护哪个棋子、或者出现了需要换子的时候，使用哪个子和对方换之类的情况下，都可以将子力价值考虑进来。这时候做出的决定会在一定程度上帮助你赢得这局游戏。"},{"title":"C++学习日记 - 找出给定数组中出现奇数次的数字","date":"2019-09-19T06:19:06.000Z","url":"/2019/09/19/C++%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-%E6%89%BE%E5%87%BA%E7%BB%99%E5%AE%9A%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E5%A5%87%E6%95%B0%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/","tags":[["C++","/tags/C/"],["编程题","/tags/%E7%BC%96%E7%A8%8B%E9%A2%98/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":"题目原文给定一个随机数组，用最小的空间复杂度找出数组中出现奇数次的数字。 问题解析给定的是随机数组，数组长度就不能确定了，这样就不能每个数字统计个数了。要求使用最小的空间复杂度，那么就尽量少用中间值。 前置知识题目相关的知识有两个，分别是： 数组的遍历，这里用for-each循环比较好 在众多数字中排除相同数字的最好方法是使用异或算法，异或算法符合交换律。任何数字与0异或都得数字本身，两个相同数字异或得0。 解题思路用for-each循环拿到所有的数字，将所有数字顺序做异或计算，最后得到的数字就是出现奇数次的数字 代码展示 点击查看完整代码 "},{"title":"国际象棋学习日记 - 记录一局比赛","date":"2019-07-02T04:57:44.000Z","url":"/2019/07/02/%E5%9B%BD%E9%99%85%E8%B1%A1%E6%A3%8B%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-%E8%AE%B0%E5%BD%95%E4%B8%80%E5%B1%80%E6%AF%94%E8%B5%9B/","tags":[["国际象棋","/tags/%E5%9B%BD%E9%99%85%E8%B1%A1%E6%A3%8B/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":"用字母描述棋子 战车(Rook)，记作R 骑士(Knight)，记作N 主教(Bishop)，记作B 皇后(Queen)，记作Q 国王(King)，记作K 小兵(Pawn)，记作P，但通常省略不写 记录一步棋想要记录一步棋，就要写出棋子的名字和它移动的格子，例如：Nf3。当移动到目标格子后吃掉了对方的棋子，用x表示吃子，例如：Nxf3。移动小兵时，通常只记录移动的格子，例如：e4。小兵吃子时，需要写出原始格子的纵坐标和移动后的格子，例如：exd5。小兵升变时，需要用=标注出升变后的棋子，例如小兵移动到对方底线升变为皇后记为：b8=Q。王车易位时，短易位记作：0-0，长易位记作：0-0-0。国王被将军时，用+标注在这步棋的后面，例如：Qd8+。国王被将死时，用#标注在这步棋的后面，例如Qd8#。对于一步棋，例如：Re3，当两个车在同一行中，就不能明确走的是哪一个车，这时就需要额外添加一个字母或数字表示棋子的原位置，记作：Rae3。 记录一回合每一回合都是由白方先走，黑方后走。用数字序号标明回合数，这样，每回合都会记录两步棋并且不会记乱。例如：1.e4 e5 记录一局比赛记录一局比赛就是记录比赛中的每一回合，例如： 1.e4 e5 2.Nf3 Nc6 3.Bc4 Bc5 4.Nc3 Nf6 5.d3 a6 6.0-0 b5 7.Bd5 Qe7 8.Nh4 Qf8 9.Bg5 Bb4 10.Bxf6 Bxc3 11.Bxg7 Qxg7 12.Nf5 Qg8 13.bxc3 Bb7 14.a4 Qg5 15.d4 b4 16.dxe5 Ra7 17.Bxf7+ Kxf7 18.Qxd7+ Qe7 19.e6+ Kg8 20.Nxe7+ Nxe7 21.Qxe7 b3 22.Qf7# 1-0 "},{"title":"密码生成器","date":"2019-06-28T12:42:59.000Z","url":"/2019/06/28/%E5%AF%86%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/","tags":[["C++","/tags/C/"],["原创","/tags/%E5%8E%9F%E5%88%9B/"],["开源","/tags/%E5%BC%80%E6%BA%90/"]],"categories":[["软件发布","/categories/%E8%BD%AF%E4%BB%B6%E5%8F%91%E5%B8%83/"]],"content":"为什么要做这个软件最开始是因为要下载一些电子书，然后被一些流氓网站强制注册才能下载。我不想因为这种小网站被脱库造成我的常用密码泄露，又不会现编密码，所以就写了这个软件帮我临时生成一个字符串当作密码。后来发现可以用作于一些随机的Token验证，就决定发出来了。 软件特点开源软件，允许在GPLv3协议下修改源代码、界面简洁干净，功能专一、同时支持大小写字母和数字的组合，最高支持一次生成100位的密码，绝对够用、生成后的密码支持更改，可以用来做一些微调、新增复制到剪贴板功能，一键复制密码 软件展示 开源地址 &amp; 软件下载软件在GitHub上开源，地址：源码链接软件提供32位与64位的可执行程序，下载地址：下载软件"},{"title":"C++学习日记 - 拆分数字","date":"2019-06-27T06:30:42.000Z","url":"/2019/06/27/C++%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-%E6%8B%86%E5%88%86%E6%95%B0%E5%AD%97/","tags":[["C++","/tags/C/"],["编程题","/tags/%E7%BC%96%E7%A8%8B%E9%A2%98/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":"题目原文将 4~100 中的所有偶数拆分成两个质数的和的形式，一行一个输出到控制台。如果某个数字有多个解的话，只允许输出一个。 问题解析首先题干中要求把 4~100 中的所有偶数拆分成：number &#x3D; x + y 这种形式，接下来还要求 x 和 y 都为质数。最后如果 x 和 y 有多种组合，只能输出其中一组。 前置知识前置知识是编程前要了解的与题目相关的知识，这里要了解的知识大致有两个，分别是： 判断偶数的方式有两种，第一种就是万能的取余法，即将一个数字除以 2 取余数，如果余数为 0 则表示该数字是偶数；另一种是连续数字的判断，当知道上一个数字是偶数的前提下，将上一个数字加上 2 就是下一个偶数。 判断质数的方式只有循环，即不断尝试所有可能的数字，筛选出最终的质数。 解题思路首先找到 4~100 中的所有偶数，然后把所有找到的数字拆分成指定的格式，接下来筛选都是质数的一组，一旦筛选出一组符合要求的组合就停止对该数字的筛选，转到下一个数字。 这里我用 for 语句，从 4 开始，每次循环变量加 2 就得到了所有的偶数。接下来用第二个 for 语句将这些数字拆分成指定的格式，最后再用 for 语句筛选质数，当筛选出符合要求的一组后，用 break 语句结束对这个数字的筛选。整个代码中主要使用了三个 for 语句完成了这道题。 代码展示 点击查看完整代码 "},{"title":"鼠标连点器","date":"2019-06-27T02:44:58.000Z","url":"/2019/06/27/%E9%BC%A0%E6%A0%87%E8%BF%9E%E7%82%B9%E5%99%A8/","tags":[["C++","/tags/C/"],["原创","/tags/%E5%8E%9F%E5%88%9B/"],["开源","/tags/%E5%BC%80%E6%BA%90/"]],"categories":[["软件发布","/categories/%E8%BD%AF%E4%BB%B6%E5%8F%91%E5%B8%83/"]],"content":"为什么要做这个软件这其实是我在玩一个小游戏的时候，需要重复、快速的点击鼠标，但是我还比较懒，故制作了这样一个小程序来代替我执行这些操作。 软件特点开源软件，允许在GPLv3协议下修改源代码、界面简洁干净，功能专一、新增的随机间隔选项可以在一定程度上防止游戏作弊检测、支持连点鼠标的所有基础按键、支持快捷键控制。 软件展示 开源地址 &amp; 软件下载软件在GitHub上开源，地址：源码链接软件提供32位与64位的可执行程序，下载地址：下载软件"},{"title":"手把手教你做智能家居 - 用手机控制电灯","date":"2019-06-26T16:02:35.000Z","url":"/2019/06/27/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%81%9A%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85-%E7%94%A8%E6%89%8B%E6%9C%BA%E6%8E%A7%E5%88%B6%E7%94%B5%E7%81%AF/","tags":[["智能家居","/tags/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"],["Arduino","/tags/Arduino/"]],"categories":[["视频","/categories/%E8%A7%86%E9%A2%91/"]],"content":"前言都说2019年是5G的元年，那么5G是什么？它有什么用？我用一期视频来告诉你们。5G带给我们更大的带宽，更高的速度，同时，IPv6协议也即将民用。有网友计算过IPv4最多可以提供约42.9亿个地址，这个数字看起来很庞大，但事实上IPv4的地址早已枯竭。我们现在用的根本不是公网IP，而是被NAT转换过的私有IP，私有IP是分域的，不同的域可以有相同的IP，过多的不细说了。IPv6据说能给地球上的每一粒沙子一个公网IP，这样想象一下，是不是突然感觉IPv4太弱了。更高的速度在全民公网IP的加持下，必定会催生出一大批智能硬件产品。 一些想说的话这个视频并不是给0基础的观众看的，观看这个视频前最少要会编程，会搭接基本电路。0基础编程的视频非常多，我这里就不列出来了。视频的最开始也阐明了这个视频所需要的前置知识。 视频 "}]